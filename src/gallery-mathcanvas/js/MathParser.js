/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var MathParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,5],$V2=[1,11],$V3=[1,4],$V4=[1,6],$V5=[1,7],$V6=[1,8],$V7=[1,9],$V8=[1,10],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,23],$Vl=[1,24],$Vm=[1,25],$Vn=[1,26],$Vo=[1,27],$Vp=[1,28],$Vq=[1,29],$Vr=[1,30],$Vs=[1,31],$Vt=[1,32],$Vu=[1,33],$Vv=[1,34],$Vw=[1,35],$Vx=[1,36],$Vy=[1,37],$Vz=[1,39],$VA=[1,40],$VB=[1,41],$VC=[1,42],$VD=[1,43],$VE=[5,8,9,16,17,18,19,24],$VF=[5,8,9,16,24],$VG=[5,8,9,16,17,18,24],$VH=[1,117],$VI=[16,24];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expression":3,"e":4,"EOF":5,"NUMBER":6,"E":7,"+":8,"-":9,"HEX":10,"PI":11,"I":12,"VARIABLE":13,"INPUT":14,"(":15,")":16,"*":17,"/":18,"^":19,"ABS":20,"ARG":21,"CONJUGATE":22,"ROTATE":23,",":24,"RE":25,"IM":26,"MIN":27,"arglist":28,"MAX":29,"SQRT":30,"LOG":31,"LOG2":32,"LOG10":33,"LN":34,"ARCSIN":35,"ARCCOS":36,"ARCTAN":37,"ARCTAN2":38,"SIN":39,"COS":40,"TAN":41,"SINH":42,"COSH":43,"TANH":44,"ARCSINH":45,"ARCCOSH":46,"ARCTANH":47,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"NUMBER",7:"E",8:"+",9:"-",10:"HEX",11:"PI",12:"I",13:"VARIABLE",14:"INPUT",15:"(",16:")",17:"*",18:"/",19:"^",20:"ABS",21:"ARG",22:"CONJUGATE",23:"ROTATE",24:",",25:"RE",26:"IM",27:"MIN",29:"MAX",30:"SQRT",31:"LOG",32:"LOG2",33:"LOG10",34:"LN",35:"ARCSIN",36:"ARCCOS",37:"ARCTAN",38:"ARCTAN2",39:"SIN",40:"COS",41:"TAN",42:"SINH",43:"COSH",44:"TANH",45:"ARCSINH",46:"ARCCOSH",47:"ARCTANH"},
productions_: [0,[3,2],[4,1],[4,4],[4,4],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,4],[4,4],[4,4],[4,6],[4,4],[4,4],[4,4],[4,4],[4,4],[4,6],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,6],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[28,1],[28,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:

		var s = yytext.toLowerCase().split('e', 2);
		if (s.length == 2)
		{
			this.$ = new yy.MathFunction.Product();
			this.$.appendArg(new yy.MathFunction.Value(s[0]));
			this.$.appendArg(new yy.MathFunction.Exponential(
				new yy.MathFunction.Value(10), new yy.MathFunction.Value(s[1])));
		}
		else
		{
			this.$ = new yy.MathFunction.Value(yytext);
		}
	
break;
case 3:

		this.$ = new yy.MathFunction.Product();
		this.$.appendArg(new yy.MathFunction.Value($$[$0-3]));
		this.$.appendArg(new yy.MathFunction.Exponential(
			new yy.MathFunction.Value(10), new yy.MathFunction.Value($$[$0])));
	
break;
case 4:

		this.$ = new yy.MathFunction.Product();
		this.$.appendArg(new yy.MathFunction.Value($$[$0-3]));
		this.$.appendArg(new yy.MathFunction.Exponential(
			new yy.MathFunction.Value(10),
			new yy.MathFunction.Negate(new yy.MathFunction.Value($$[$0]))));
	
break;
case 5:
this.$ = new yy.MathFunction.Value(yytext);
break;
case 6:
this.$ = new yy.MathFunction.E();
break;
case 7:
this.$ = new yy.MathFunction.Pi();
break;
case 8:
this.$ = new yy.MathFunction.I();
break;
case 9:
this.$ = new yy.MathFunction.Variable(yytext);
break;
case 10:
this.$ = new yy.MathFunction.Input(yytext);
break;
case 11:
this.$ = $$[$0-1];
break;
case 12:
this.$ = yy.MathFunction.updateSum($$[$0-2], $$[$0]);
break;
case 13:
this.$ = yy.MathFunction.updateSum($$[$0-2], new yy.MathFunction.Negate($$[$0]));
break;
case 14:
this.$ = yy.MathFunction.updateProduct($$[$0-2], $$[$0]);
break;
case 15:
this.$ = new yy.MathFunction.Quotient($$[$0-2], $$[$0]);
break;
case 16:
this.$ = new yy.MathFunction.Exponential($$[$0-2], $$[$0]);
break;
case 17:
this.$ = new yy.MathFunction.Negate($$[$0]);
break;
case 18:
this.$ = new yy.MathFunction.Magnitude($$[$0-1]);
break;
case 19:
this.$ = new yy.MathFunction.Phase($$[$0-1]);
break;
case 20:
this.$ = new yy.MathFunction.Conjugate($$[$0-1]);
break;
case 21:
this.$ = new yy.MathFunction.Rotate($$[$0-3], $$[$0-1]);
break;
case 22:
this.$ = new yy.MathFunction.RealPart($$[$0-1]);
break;
case 23:
this.$ = new yy.MathFunction.ImaginaryPart($$[$0-1]);
break;
case 24:
this.$ = new yy.MathFunction.Min($$[$0-1]);
break;
case 25:
this.$ = new yy.MathFunction.Max($$[$0-1]);
break;
case 26:
this.$ = new yy.MathFunction.SquareRoot($$[$0-1]);
break;
case 27:
this.$ = new yy.MathFunction.Logarithm($$[$0-3], $$[$0-1]);
break;
case 28:
this.$ = new yy.MathFunction.Logarithm(new yy.MathFunction.Value(2), $$[$0-1]);
break;
case 29:
this.$ = new yy.MathFunction.Logarithm(new yy.MathFunction.Value(10), $$[$0-1]);
break;
case 30:
this.$ = new yy.MathFunction.NaturalLog($$[$0-1]);
break;
case 31:
this.$ = new yy.MathFunction.Arcsine($$[$0-1]);
break;
case 32:
this.$ = new yy.MathFunction.Arccosine($$[$0-1]);
break;
case 33:
this.$ = new yy.MathFunction.Arctangent($$[$0-1]);
break;
case 34:
this.$ = new yy.MathFunction.Arctangent2($$[$0-3], $$[$0-1]);
break;
case 35:
this.$ = new yy.MathFunction.Sine($$[$0-1]);
break;
case 36:
this.$ = new yy.MathFunction.Cosine($$[$0-1]);
break;
case 37:
this.$ = new yy.MathFunction.Tangent($$[$0-1]);
break;
case 38:
this.$ = new yy.MathFunction.HyperbolicSine($$[$0-1]);
break;
case 39:
this.$ = new yy.MathFunction.HyperbolicCosine($$[$0-1]);
break;
case 40:
this.$ = new yy.MathFunction.HyperbolicTangent($$[$0-1]);
break;
case 41:
this.$ = new yy.MathFunction.InverseHyperbolicSine($$[$0-1]);
break;
case 42:
this.$ = new yy.MathFunction.InverseHyperbolicCosine($$[$0-1]);
break;
case 43:
this.$ = new yy.MathFunction.InverseHyperbolicTangent($$[$0-1]);
break;
case 44:
this.$ = [ $$[$0] ];
break;
case 45:
this.$ = $$[$0-2].concat($$[$0]);
break;
}
},
table: [{3:1,4:2,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{1:[3]},{5:[1,38],8:$Vz,9:$VA,17:$VB,18:$VC,19:$VD},o($VE,[2,2],{7:[1,44]}),o($VE,[2,5]),o($VE,[2,6]),o($VE,[2,7]),o($VE,[2,8]),o($VE,[2,9]),o($VE,[2,10]),{4:45,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:46,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{15:[1,47]},{15:[1,48]},{15:[1,49]},{15:[1,50]},{15:[1,51]},{15:[1,52]},{15:[1,53]},{15:[1,54]},{15:[1,55]},{15:[1,56]},{15:[1,57]},{15:[1,58]},{15:[1,59]},{15:[1,60]},{15:[1,61]},{15:[1,62]},{15:[1,63]},{15:[1,64]},{15:[1,65]},{15:[1,66]},{15:[1,67]},{15:[1,68]},{15:[1,69]},{15:[1,70]},{15:[1,71]},{15:[1,72]},{1:[2,1]},{4:73,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:74,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:75,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:76,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:77,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{8:[1,78],9:[1,79]},{8:$Vz,9:$VA,16:[1,80],17:$VB,18:$VC,19:$VD},o($VE,[2,17]),{4:81,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:82,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:83,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:84,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:85,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:86,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:88,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,28:87,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:88,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,28:89,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:90,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:91,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:92,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:93,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:94,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:95,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:96,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:97,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:98,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:99,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:100,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:101,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:102,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:103,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:104,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:105,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:106,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},{4:107,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},o($VF,[2,12],{17:$VB,18:$VC,19:$VD}),o($VF,[2,13],{17:$VB,18:$VC,19:$VD}),o($VG,[2,14],{19:$VD}),o($VG,[2,15],{19:$VD}),o($VG,[2,16],{19:$VD}),{6:[1,108]},{6:[1,109]},o($VE,[2,11]),{8:$Vz,9:$VA,16:[1,110],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,111],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,112],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,17:$VB,18:$VC,19:$VD,24:[1,113]},{8:$Vz,9:$VA,16:[1,114],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,115],17:$VB,18:$VC,19:$VD},{16:[1,116],24:$VH},o($VI,[2,44],{8:$Vz,9:$VA,17:$VB,18:$VC,19:$VD}),{16:[1,118],24:$VH},{8:$Vz,9:$VA,16:[1,119],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,17:$VB,18:$VC,19:$VD,24:[1,120]},{8:$Vz,9:$VA,16:[1,121],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,122],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,123],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,124],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,125],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,126],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,17:$VB,18:$VC,19:$VD,24:[1,127]},{8:$Vz,9:$VA,16:[1,128],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,129],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,130],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,131],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,132],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,133],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,134],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,135],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,136],17:$VB,18:$VC,19:$VD},o($VE,[2,3]),o($VE,[2,4]),o($VE,[2,18]),o($VE,[2,19]),o($VE,[2,20]),{4:137,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},o($VE,[2,22]),o($VE,[2,23]),o($VE,[2,24]),{4:138,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},o($VE,[2,25]),o($VE,[2,26]),{4:139,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},o($VE,[2,28]),o($VE,[2,29]),o($VE,[2,30]),o($VE,[2,31]),o($VE,[2,32]),o($VE,[2,33]),{4:140,6:$V0,7:$V1,9:$V2,10:$V3,11:$V4,12:$V5,13:$V6,14:$V7,15:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,25:$Vd,26:$Ve,27:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy},o($VE,[2,35]),o($VE,[2,36]),o($VE,[2,37]),o($VE,[2,38]),o($VE,[2,39]),o($VE,[2,40]),o($VE,[2,41]),o($VE,[2,42]),o($VE,[2,43]),{8:$Vz,9:$VA,16:[1,141],17:$VB,18:$VC,19:$VD},o($VI,[2,45],{8:$Vz,9:$VA,17:$VB,18:$VC,19:$VD}),{8:$Vz,9:$VA,16:[1,142],17:$VB,18:$VC,19:$VD},{8:$Vz,9:$VA,16:[1,143],17:$VB,18:$VC,19:$VD},o($VE,[2,21]),o($VE,[2,27]),o($VE,[2,34])],
defaultActions: {38:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 10;		/* hex */
break;
case 1:return 6;	/* decimal w/ exponent */
break;
case 2:return 6;	/* decimal w/ exponent */
break;
case 3:return 6;	/* zero */
break;
case 4:return 6;	/* decimal integer */
break;
case 5:return 17;
break;
case 6:return 18;
break;
case 7:return 9;
break;
case 8:return 8;
break;
case 9:return 19;
break;
case 10:return 15;
break;
case 11:return 16;
break;
case 12:return 24;
break;
case 13:return 25;
break;
case 14:return 26;
break;
case 15:return 20;
break;
case 16:return 21;
break;
case 17:return 22;
break;
case 18:return 23;
break;
case 19:return 29;
break;
case 20:return 27;
break;
case 21:return 30;
break;
case 22:return 31;
break;
case 23:return 32;
break;
case 24:return 33;
break;
case 25:return 34;
break;
case 26:return 35;
break;
case 27:return 36;
break;
case 28:return 37;
break;
case 29:return 38;
break;
case 30:return 39;
break;
case 31:return 40;
break;
case 32:return 41;
break;
case 33:return 42;
break;
case 34:return 43;
break;
case 35:return 44;
break;
case 36:return 45;
break;
case 37:return 46;
break;
case 38:return 47;
break;
case 39:return 11;
break;
case 40:return 11;
break;
case 41:return 7;
break;
case 42:return 12;
break;
case 43:return 14;
break;
case 44:return 13;
break;
case 45:/* skip whitespace */
break;
case 46:return 5;
break;
}
},
rules: [/^(?:0[xX][0-9a-fA-F]+)/,/^(?:[0-9]+\.([0-9]+)?([eE][0-9]+)?)/,/^(?:([0-9]+)?\.[0-9]+([eE][0-9]+)?)/,/^(?:0([eE][0-9]+)?)/,/^(?:[1-9][0-9]*([eE][0-9]+)?)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:re\b)/,/^(?:im\b)/,/^(?:abs\b)/,/^(?:arg\b)/,/^(?:conjugate\b)/,/^(?:rotate\b)/,/^(?:max\b)/,/^(?:min\b)/,/^(?:sqrt\b)/,/^(?:log\b)/,/^(?:log2\b)/,/^(?:log10\b)/,/^(?:ln\b)/,/^(?:arcsin\b)/,/^(?:arccos\b)/,/^(?:arctan\b)/,/^(?:arctan2\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:sinh\b)/,/^(?:cosh\b)/,/^(?:tanh\b)/,/^(?:arcsinh\b)/,/^(?:arccosh\b)/,/^(?:arctanh\b)/,/^(?:pi\b)/,/^(?:\u03c0)/,/^(?:e\b)/,/^(?:[iIjJ])/,/^(?:\?)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:\s+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = MathParser;
exports.Parser = MathParser.Parser;
exports.parse = function () { return MathParser.parse.apply(MathParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}